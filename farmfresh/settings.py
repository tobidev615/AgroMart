"""
Django settings for farmfresh project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import environ
import logging
import sys

# Configure PyMySQL for MySQL connections
import pymysql
pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Environment setup
env = environ.Env(
    DEBUG=(bool, True),
)
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY", default="dev-insecure-secret-change-me")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'drf_spectacular',
    'rest_framework.authtoken',
    'api',
    'userprofiles',
    'farmers',
    'orders',
    'notifications',
    'subscriptions',
    'business',
    'distributors',
    'deliveries',
    'django_filters',
    'payments',
    'audit',
    'consumers',
]

# Feature flags for optional modules (controlled via environment variables)
FEATURE_PAYMENTS_ENABLED = env.bool('FEATURE_PAYMENTS_ENABLED', default=True)
FEATURE_SUBSCRIPTIONS_ENABLED = env.bool('FEATURE_SUBSCRIPTIONS_ENABLED', default=True)
FEATURE_DELIVERIES_ENABLED = env.bool('FEATURE_DELIVERIES_ENABLED', default=True)
FEATURE_DISTRIBUTORS_ENABLED = env.bool('FEATURE_DISTRIBUTORS_ENABLED', default=True)
FEATURE_NOTIFICATIONS_ENABLED = env.bool('FEATURE_NOTIFICATIONS_ENABLED', default=True)
FEATURE_BUSINESS_ENABLED = env.bool('FEATURE_BUSINESS_ENABLED', default=True)
FEATURE_CONSUMERS_ENABLED = env.bool('FEATURE_CONSUMERS_ENABLED', default=True)

# Optionally remove apps entirely if disabled (keeps migrations simpler if left installed)
OPTIONALLY_INSTALLED_APPS = {
    'payments': FEATURE_PAYMENTS_ENABLED,
    'subscriptions': FEATURE_SUBSCRIPTIONS_ENABLED,
    'deliveries': FEATURE_DELIVERIES_ENABLED,
    'distributors': FEATURE_DISTRIBUTORS_ENABLED,
    'notifications': FEATURE_NOTIFICATIONS_ENABLED,
    'business': FEATURE_BUSINESS_ENABLED,
}

# Prune INSTALLED_APPS by feature flags (keep core apps regardless)
_pruned_apps = []
for app_label in INSTALLED_APPS:
    if app_label in OPTIONALLY_INSTALLED_APPS:
        if OPTIONALLY_INSTALLED_APPS[app_label]:
            _pruned_apps.append(app_label)
    else:
        _pruned_apps.append(app_label)
INSTALLED_APPS = _pruned_apps

# Django REST framework settings (see consolidated config below)

MIDDLEWARE = [
    'farmfresh.logging.RequestIdMiddleware',
    'farmfresh.middleware.SecurityHeadersMiddleware',
    'farmfresh.middleware.InputSanitizationMiddleware',
    'farmfresh.middleware.SQLInjectionProtectionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'farmfresh.middleware.AdvancedRateLimitMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'farmfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'farmfresh.wsgi.application'


# Database
# Use MySQL via DATABASE_URL in production; fall back to sqlite for dev/testing.
# Examples:
#   DATABASE_URL=mysql://user:password@hostname:3306/dbname
#   (leave unset to use sqlite)

# Check if DATABASE_URL is set (production)
if env('DATABASE_URL', default=''):
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(env('DATABASE_URL'))
    }
else:
    # Development: SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
LANGUAGES = [
    ('en', 'English'),
]
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional locations of static files
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Static files finders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Django REST framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'farmfresh.pagination.DefaultPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'farmfresh.exceptions.custom_exception_handler',
}

# Email settings (configurable via env; defaults to console backend for dev)
EMAIL_BACKEND = env(
    "EMAIL_BACKEND",
    default="django.core.mail.backends.console.EmailBackend",
)
EMAIL_HOST = env("EMAIL_HOST", default="")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="no-reply@farmfresh.local")

# Twilio (optional)
TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID", default=None)
TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN", default=None)
TWILIO_FROM_NUMBER = env("TWILIO_FROM_NUMBER", default=None)

# CORS/CSRF settings
CORS_ALLOW_ALL_ORIGINS = env.bool("CORS_ALLOW_ALL_ORIGINS", default=True)
CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=[])
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=[])

# Security settings
SECURE_SSL_REDIRECT = env.bool("SECURE_SSL_REDIRECT", default=False)
SECURE_HSTS_SECONDS = env.int("SECURE_HSTS_SECONDS", default=0)
SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("SECURE_HSTS_INCLUDE_SUBDOMAINS", default=False)
SECURE_HSTS_PRELOAD = env.bool("SECURE_HSTS_PRELOAD", default=False)
SECURE_CONTENT_TYPE_NOSNIFF = env.bool("SECURE_CONTENT_TYPE_NOSNIFF", default=True)
SECURE_BROWSER_XSS_FILTER = env.bool("SECURE_BROWSER_XSS_FILTER", default=True)
X_FRAME_OPTIONS = env("X_FRAME_OPTIONS", default="DENY")
SESSION_COOKIE_SECURE = env.bool("SESSION_COOKIE_SECURE", default=False)
CSRF_COOKIE_SECURE = env.bool("CSRF_COOKIE_SECURE", default=False)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery / Redis
CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", default=CELERY_BROKER_URL)
CELERY_TASK_ALWAYS_EAGER = env.bool("CELERY_TASK_ALWAYS_EAGER", default=False)
CELERY_TASK_TIME_LIMIT = env.int("CELERY_TASK_TIME_LIMIT", default=300)
CELERY_BEAT_SCHEDULE = {
    "send_digests_daily": {
        "task": "notifications.tasks.send_digest_task",
        "schedule": 24 * 60 * 60,  # daily
        "options": {"queue": "default"},
    },
    "run_subscription_cycle_daily": {
        "task": "subscriptions.tasks.run_subscription_cycle_task",
        "schedule": 24 * 60 * 60,  # daily
        "options": {"queue": "default"},
    },
}

# Sentry (optional)
SENTRY_DSN = env("SENTRY_DSN", default="")
SENTRY_TRACES_SAMPLE_RATE = env.float("SENTRY_TRACES_SAMPLE_RATE", default=0.0)
SENTRY_ENVIRONMENT = env("SENTRY_ENVIRONMENT", default="development")

if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.redis import RedisIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(),
            RedisIntegration(),
        ],
        traces_sample_rate=1.0,
        send_default_pii=True,
    )

# Logging Configuration
# Ensure logs directory exists
LOGS_DIR = BASE_DIR / 'logs'
try:
    os.makedirs(LOGS_DIR, exist_ok=True)
except Exception:
    # Fallback to BASE_DIR if logs dir cannot be created
    LOGS_DIR = BASE_DIR

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'request_id': {
            '()': 'farmfresh.logging.RequestIdFilter',
        },
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'structured': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message} request_id={request_id}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'structured',
            'filters': ['request_id'],
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': str(LOGS_DIR / 'app.log'),
            'formatter': 'structured',
            'filters': ['request_id'],
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'farmfresh': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Ensure RequestIdMiddleware is first to capture earliest
MIDDLEWARE.insert(0, 'farmfresh.logging.RequestIdMiddleware')

# Middleware (ensure LocaleMiddleware early)
if 'django.middleware.locale.LocaleMiddleware' not in MIDDLEWARE:
    MIDDLEWARE.insert(2, 'django.middleware.locale.LocaleMiddleware')

# If running behind a proxy (nginx), trust it for secure scheme when configured
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = max(SECURE_HSTS_SECONDS, 3600)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Media / Static storage
MEDIA_URL = '/media/'
# Use Railway volume path in production, fallback to local in development
MEDIA_ROOT = env('MEDIA_ROOT', default=BASE_DIR / 'media')

# Optional S3 storage
USE_S3 = env.bool('USE_S3', default=False)
if USE_S3:
    INSTALLED_APPS.append('storages')
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', default='')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', default='')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME', default='')
    AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME', default='')
    AWS_S3_SIGNATURE_VERSION = env('AWS_S3_SIGNATURE_VERSION', default='s3v4')
    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None
    AWS_QUERYSTRING_AUTH = False

# Stripe
STRIPE_API_KEY = env('STRIPE_API_KEY', default='')
STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET', default='')

# Cache configuration
# Cache configuration (Redis if CACHE_URL set; otherwise in‑memory cache)
_CACHE_URL = env('CACHE_URL', default='')
if _CACHE_URL:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': _CACHE_URL,
            'KEY_PREFIX': 'farmfresh',
            'TIMEOUT': 300,  # 5 minutes default
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'farmfresh-locmem',
            'TIMEOUT': 300,
        }
    }

# Use Redis for session storage
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
